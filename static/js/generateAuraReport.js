// --- Icon Map ---
const modalityIcons = {
  visual: "/icons/visual.png",
  sensory: "/icons/sensory.png",
  speech: "/icons/speech.png",
  motor: "/icons/motor.png",
  brainstem: "/icons/brainstem.png",
  retinal: "/icons/retinal.png",
  other: "/icons/other.png",
};

// --- Shared Components ---
async function drawHeader(doc, title = "Migraine Aura Report") {
  doc.setFontSize(14).setFont("helvetica", "bold").text(title, 20, 20);
  try {
    const url = "/images/report-logo.png";
    const base64 = await loadImageAsBase64(url);
    const img = new Image();
    img.src = url;
    await new Promise((res, rej) => {
      img.onload = res;
      img.onerror = rej;
    });
    const h = 40 / (img.width / img.height);
    doc.addImage(base64, "PNG", 150, 10, 40, h);
  } catch (e) {
    console.warn("Logo missing:", e);
  }
  doc.line(20, 28, 190, 28);
}

function drawFooter(doc) {
  const h = doc.internal.pageSize.getHeight();
  doc.setFontSize(8).setTextColor(120).setFont("helvetica", "normal");
  doc.text("Generated by Migraine Aura Foundation", 20, h - 10);
  doc.text("www.migraine-aura.org", 150, h - 10, { align: "right" });
  doc.setFontSize(7).setTextColor(150);
  doc.text(
    "This assessment is not a diagnosis. See full disclaimer on last page.",
    20,
    h - 5,
  );
}

function drawWarningBlock(doc, y = 35) {
  doc.setFontSize(10).setTextColor(200, 0, 0);
  doc.text(
    "This report is informational only and not a medical diagnosis.",
    20,
    y,
  );
  doc.setTextColor(0);
  return y + 10;
}

async function drawModalityGrid(doc, modalities = [], y = 35) {
  const all = ["visual", "sensory", "speech", "motor", "brainstem", "retinal"];
  const labels = {
    visual: "Visual",
    sensory: "Sensory",
    speech: "Speech",
    motor: "Motor",
    brainstem: "Brainstem",
    retinal: "Retinal",
  };
  const x0 = 20,
    cols = 3,
    w = 40,
    h = 20,
    gapX = 55,
    gapY = 50;
  doc
    .setFont("helvetica", "bold")
    .setFontSize(11)
    .text("Aura Modalities Overview", x0, y);
  y += 10;

  for (let i = 0; i < all.length; i++) {
    const m = all[i],
      row = Math.floor(i / cols),
      col = i % cols;
    const x = x0 + col * gapX,
      yPos = y + row * gapY;
    const present = modalities.includes(m);
    const path = present
      ? modalityIcons[m]
      : modalityIcons[m].replace(".png", "_no.png");

    try {
      const base64 = await loadImageAsBase64(path);
      doc.addImage(base64, "PNG", x, yPos, w, h);
    } catch {
      doc.setFillColor(255, 255, 255).rect(x, yPos, w, h, "F");
    }

    doc.setFont("helvetica", "normal").setFontSize(9);
    doc.text(labels[m], x + w / 2, yPos + h + 5, { align: "center" });
  }

  return y + 2 * gapY + h + 10;
}

// --- Section Blocks ---
function buildOtherOnlyContent(doc, data, y) {
  const text = data.otherDescription || "[No description provided]";
  doc
    .setFont("helvetica", "bold")
    .setFontSize(11)
    .text("Described 'Other' Aura Symptom:", 20, y);
  doc.setFont("helvetica", "italic").setFontSize(10);
  const lines = doc.splitTextToSize(text, 170);
  doc.text(lines, 25, y + 10);
}

function buildStandardAuraContent(doc, data, y) {
  const fields = [
    {
      label: "Progression",
      text: "Spreads gradually ≥5 minutes",
      v: data.characteristics?.progression,
    },
    {
      label: "Succession",
      text: "2+ symptoms in succession",
      v: data.characteristics?.succession,
    },
    {
      label: "Duration",
      text: "Each lasts 5–60 minutes",
      v: data.characteristics?.duration,
    },
    {
      label: "Laterality",
      text: "At least one unilateral",
      v: data.characteristics?.laterality,
    },
    {
      label: "Positive/Negative",
      text: "At least one positive symptom",
      v: data.characteristics?.positive,
    },
    {
      label: "Headache",
      text: "Followed by headache <60 min",
      v: data.characteristics?.headacheOnset,
    },
  ];
  doc
    .setFont("helvetica", "bold")
    .setFontSize(12)
    .text("Aura Characteristics", 20, y);
  y += 8;

  fields.forEach((f) => {
    const yes = f.v === true,
      [r, g, b] = yes ? [0, 150, 0] : [200, 0, 0];
    doc.setFont("helvetica", "bold").setFontSize(10).setTextColor(0);
    doc.text(`${f.label}:`, 20, y);
    doc
      .setFont("helvetica", "normal")
      .setTextColor(r, g, b)
      .text(yes ? "Yes" : "No", 55, y);
    doc.setFontSize(9).setTextColor(0);
    const lines = doc.splitTextToSize(f.text, 170);
    doc.text(lines, 25, y + 5);
    y += 12 + (lines.length - 1) * 5;
  });

  const passed = fields.filter((f) => f.v).length;
  const summary = `You meet ${passed} of 6 clinical characteristics for migraine aura (C criterion).`;
  doc
    .setFont("helvetica", "bold")
    .setFontSize(11)
    .setTextColor(passed >= 3 ? 0x009600 : 0xcc0000);
  doc.text(doc.splitTextToSize(summary, 170), 20, (y += 5));
  doc.setTextColor(0);
}

function appendDisclaimerPage(doc) {
  doc.addPage();
  doc
    .setFont("helvetica", "bold")
    .setFontSize(12)
    .text("⚠️ Disclaimer", 20, 30);
  doc.setFont("helvetica", "normal").setFontSize(10);
  const disclaimer = `This assessment was conducted using a self-report tool developed by the Migraine Aura Foundation. It is not a medical diagnosis.

Neurological symptoms can have many causes. This assumes your symptoms are not better explained by another medical condition such as epilepsy, stroke, multiple sclerosis, or eye disorders.

If your symptoms are new, worsening, or unusual, seek medical advice immediately.`;
  doc.text(doc.splitTextToSize(disclaimer, 170), 20, 45);
}

// --- Image Loader ---
async function loadImageAsBase64(url) {
  return new Promise((resolve, reject) => {
    const img = new Image();
    img.crossOrigin = "anonymous";
    img.onload = () => {
      const c = document.createElement("canvas");
      c.width = img.width;
      c.height = img.height;
      c.getContext("2d").drawImage(img, 0, 0);
      resolve(c.toDataURL("image/png"));
    };
    img.onerror = reject;
    img.src = url;
  });
}

// --- Main Function ---
async function generateAuraReport(flowType, data) {
  const { jsPDF } = window.jspdf;
  const doc = new jsPDF();

  await drawHeader(doc);
  let y = drawWarningBlock(doc);
  y = await drawModalityGrid(doc, data.modalities || [], y + 5);

  if ((data.modalities || []).includes("other")) {
    const text = data.otherDescription || "[No description provided]";
    doc
      .setFont("helvetica", "bold")
      .setFontSize(11)
      .text("Described 'Other' Aura Symptom:", 20, y);
    doc.setFont("helvetica", "italic").setFontSize(10);
    const lines = doc.splitTextToSize(text, 170);
    doc.text(lines, 25, y + 10);
    y += 16 + lines.length * 6;
  }

  if (flowType === "standard") {
    buildStandardAuraContent(doc, data, y);
  } else if (flowType === "plus-other" || flowType === "other-only") {
    buildOtherOnlyContent(doc, data, y);
  } else {
    doc
      .setFont("helvetica", "bold")
      .setFontSize(10)
      .text("Unknown flow type.", 20, y);
  }

  drawFooter(doc);
  appendDisclaimerPage(doc);
  doc.save("aura_report.pdf");
}
