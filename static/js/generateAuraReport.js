import { generateNarrativeSummary } from "./aura-symptom-check/summaryGeneration.js";

// --- Icon Map ---
const modalityIcons = {
  visual: "/icons/visual.png",
  sensory: "/icons/sensory.png",
  speech: "/icons/speech.png",
  motor: "/icons/motor.png",
  brainstem: "/icons/brainstem.png",
  retinal: "/icons/retinal.png",
  other: "/icons/other.png",
};

// --- Image Loader ---
async function loadImageAsBase64(url) {
  return new Promise((resolve, reject) => {
    const img = new Image();
    img.crossOrigin = "anonymous";
    img.onload = () => {
      const c = document.createElement("canvas");
      c.width = img.width;
      c.height = img.height;
      c.getContext("2d").drawImage(img, 0, 0);
      resolve(c.toDataURL("image/png"));
    };
    img.onerror = reject;
    img.src = url;
  });
}

// --- Shared Components ---
async function drawHeader(doc, title = "Migraine Aura Report") {
  doc.setFontSize(14).setFont("helvetica", "bold").text(title, 20, 20);

  try {
    const url = "/images/report-logo.png";
    const base64 = await loadImageAsBase64(url);
    const img = new Image();
    img.src = url;
    await new Promise((res, rej) => {
      img.onload = res;
      img.onerror = rej;
    });
    const h = 40 / (img.width / img.height);
    doc.addImage(base64, "PNG", 150, 10, 40, h);
  } catch (e) {
    console.warn("Logo missing:", e);
  }

  doc.setFontSize(9).setFont("helvetica", "normal");
  doc.setTextColor(0);
  doc.text("This automated report adheres to ICHD-3 criteria and is", 20, 26);
  doc.setTextColor(200, 0, 0);
  doc.text(
    " not a substitute ",
    doc.getTextWidth(
      "This automated report adheres to ICHD-3 criteria and is",
    ) + 20,
    26,
  );
  doc.setTextColor(0);
  doc.text(
    "for professional medical diagnosis.",
    doc.getTextWidth(
      "This automated report adheres to ICHD-3 criteria and is not a substitute ",
    ) + 20,
    26,
  );

  doc.setFontSize(10).setTextColor(0, 0, 0);
  doc.setDrawColor(0);
  doc.line(20, 28, 190, 28);
}

function drawFooter(doc) {
  const h = doc.internal.pageSize.getHeight();
  doc.setFontSize(8).setTextColor(120).setFont("helvetica", "normal");
  doc.text("Generated by Migraine Aura Foundation", 20, h - 10);
  doc.text("www.migraine-aura.org", 150, h - 10, { align: "right" });
  doc.setFontSize(7).setTextColor(150);
  doc.text(
    "This assessment is not a diagnosis. See full disclaimer on last page.",
    20,
    h - 5,
  );
}

function drawSelectedModalities(doc, modalities = [], y = 35) {
  const labels = {
    visual: "Visual",
    sensory: "Sensory",
    speech: "Speech",
    motor: "Motor",
    brainstem: "Brainstem",
    retinal: "Retinal",
    other: "Other",
  };

  doc.setFont("helvetica", "bold").setFontSize(11);
  doc.text("Selected Aura Modalities", 20, y);
  y += 8;

  doc.setFont("helvetica", "normal").setFontSize(10);
  const lineHeight = doc.getFontSize() * doc.getLineHeightFactor();

  modalities.forEach((m) => {
    const label = `• ${labels[m] || m}`;
    doc.text(label, 25, y);
    y += lineHeight;
  });

  return y;
}

function buildOtherOnlyContent(doc, data, y) {
  const text = data.otherDescription || "[No description provided]";
  doc
    .setFont("helvetica", "bold")
    .setFontSize(11)
    .text("Described 'Other' Aura Symptom:", 20, y);
  doc.setFont("helvetica", "italic").setFontSize(10);
  const lines = doc.splitTextToSize(text, 170);
  doc.text(lines, 25, y + 10);
}

function buildStandardAuraContent(doc, data, y) {
  const fields = [
    {
      label: "Progression",
      text: "Spreads gradually over minutes",
      v: data.characteristics?.progression,
    },
    {
      label: "Succession",
      text: "2+ symptoms in succession",
      v: data.characteristics?.succession,
    },
    {
      label: "Duration",
      text: "Each lasts 5–60 minutes",
      v: data.characteristics?.duration,
    },
    {
      label: "Laterality",
      text: "At least one unilateral",
      v: data.characteristics?.laterality,
    },
    {
      label: "Positive/Negative",
      text: "At least one positive symptom",
      v: data.characteristics?.positive,
    },
    {
      label: "Headache",
      text: "Followed by headache <60 min",
      v: data.characteristics?.headacheOnset,
    },
  ];

  doc
    .setFont("helvetica", "bold")
    .setFontSize(12)
    .text("Aura Characteristics", 20, y);
  y += 8;

  fields.forEach((f) => {
    const yes = f.v === true;
    const [r, g, b] = yes ? [0, 150, 0] : [200, 0, 0];
    doc.setFont("helvetica", "bold").setFontSize(10).setTextColor(0);
    doc.text(`${f.label}:`, 20, y);
    doc
      .setFont("helvetica", "normal")
      .setTextColor(r, g, b)
      .text(yes ? "Yes" : "No", 55, y);
    doc.setFontSize(9).setTextColor(0);
    const lines = doc.splitTextToSize(f.text, 170);
    doc.text(lines, 25, y + 5);
    y += 12 + (lines.length - 1) * 5;
  });

  const passed = fields.filter((f) => f.v).length;
  const summary = `You meet ${passed} of 6 clinical characteristics for migraine aura (C criterion).`;
  doc
    .setFont("helvetica", "bold")
    .setFontSize(11)
    .setTextColor(passed >= 3 ? 0x009600 : 0xcc0000);
  doc.text(doc.splitTextToSize(summary, 170), 20, (y += 5));
  doc.setTextColor(0);
}

async function drawNarrativeSummary(doc, htmlString, startY = 35) {
  const tempDiv = document.createElement("div");
  tempDiv.innerHTML = htmlString;
  document.body.appendChild(tempDiv);

  let y = startY;
  const pageHeight = doc.internal.pageSize.getHeight();
  const margin = 20;
  const lineHeight = 6;

  const addLines = async (lines, fontStyle = "normal") => {
    doc.setFont("helvetica", fontStyle).setFontSize(10);
    for (const line of lines) {
      if (y + lineHeight > pageHeight - margin) {
        drawFooter(doc);
        doc.addPage();
        await drawHeader(doc);
        y = 30;
      }
      doc.text(line, margin, y);
      y += lineHeight;
    }
  };

  for (const node of tempDiv.childNodes) {
    if (node.nodeType === Node.ELEMENT_NODE) {
      if (node.tagName === "H3" || node.tagName === "H2") {
        const text = node.innerText.trim();
        if (text) {
          doc.setFont("helvetica", "bold").setFontSize(12);
          if (y + lineHeight > pageHeight - margin) {
            drawFooter(doc);
            doc.addPage();
            await drawHeader(doc);
            y = 30;
          }
          doc.text(text, margin, y);
          y += lineHeight;
        }
      } else if (node.tagName === "P") {
        const lines = doc.splitTextToSize(node.innerText.trim(), 170);
        await addLines(lines, "normal");
        y += lineHeight / 2;
      } else if (node.tagName === "UL") {
        for (const li of node.querySelectorAll("li")) {
          const lines = doc.splitTextToSize(`• ${li.innerText.trim()}`, 170);
          await addLines(lines, "normal");
        }
        y += lineHeight / 2;
      }
    }
  }

  drawFooter(doc);
  document.body.removeChild(tempDiv);
  return y;
}

function appendDisclaimerPage(doc) {
  doc.addPage();
  drawHeader(doc);
  drawFooter(doc);
  doc
    .setFont("helvetica", "bold")
    .setFontSize(12)
    .text("⚠️ Disclaimer", 20, 30);
  doc.setFont("helvetica", "normal").setFontSize(10);
  const disclaimer = `This assessment was conducted using a self-report tool developed by the Migraine Aura Foundation. It is not a medical diagnosis.

Neurological symptoms can have many causes. This assumes your symptoms are not better explained by another medical condition such as epilepsy, stroke, multiple sclerosis, or eye disorders.

If your symptoms are new, worsening, or unusual, seek medical advice immediately.`;
  doc.text(doc.splitTextToSize(disclaimer, 170), 20, 45);
}

// --- Main Function ---
async function generateAuraReport(flowType, data) {
  const { jsPDF } = window.jspdf;
  const doc = new jsPDF();

  await drawHeader(doc);
  let y = 30;

  const narrativeHtml = generateNarrativeSummary({
    data,
    userInfo: data.userInfo,
    acuteChronicData: data.acuteChronicData,
    acuteChronicAnswers: data.acuteChronicAnswers,
    auraCharacteristicsAnswers: data.auraCharacteristicsAnswers,
  });

  y += 10;
  y = await drawNarrativeSummary(doc, narrativeHtml, y);

  doc.addPage();
  await drawHeader(doc);
  y = 30;

  y = drawSelectedModalities(doc, data.modalities || [], y + 5);

  if ((data.modalities || []).includes("other")) {
    buildOtherOnlyContent(doc, data, y);
    y += 20;
  }

  if (flowType === "standard") {
    buildStandardAuraContent(doc, data, y);
  } else if (flowType === "plus-other" || flowType === "other-only") {
    buildOtherOnlyContent(doc, data, y);
  } else {
    doc
      .setFont("helvetica", "bold")
      .setFontSize(10)
      .text("Unknown flow type.", 20, y);
  }

  drawFooter(doc);
  appendDisclaimerPage(doc);
  doc.save("aura_report.pdf");
}

window.generateAuraReport = generateAuraReport;
